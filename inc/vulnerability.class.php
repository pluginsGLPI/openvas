<?php
/* @version $Id$
--------------------------------------------------------------------------
LICENSE

 This file is part of the openvas plugin.

OpenVAS plugin is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

openvas plugin is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GLPI; along with openvas. If not, see <http://www.gnu.org/licenses/>.
--------------------------------------------------------------------------
@package   openvas
@author    Teclib'
@copyright Copyright (c) 2016 Teclib'
@license   GPLv3
           http://www.gnu.org/licenses/gpl.txt
@link      https://github.com/pluginsGLPI/openvas
@link      http://www.glpi-project.org/
@link      http://www.teclib-edition.com/
@since     2016
----------------------------------------------------------------------*/

if (!defined('GLPI_ROOT')) {
   die("Sorry. You can't access directly to this file");
}

class PluginOpenvasVulnerability extends CommonDBTM {

   static $rightname = 'plugin_openvas_vulnerability';
   public $dohistory = true;

   public static function getTypeName($nb = 0) {
      return __("Vulnerability", "openvas");
   }

   function rawSearchOptions() {

      $tab = [];

      $tab[] = [
           'id'     => 'common',
           'name'   => __("OpenVAS", "openvas")
       ];

       $tab[] = [
           'id'             => 1,
           'table'          => $this->getTable(),
           'field'          => 'name',
           'name'           => __('Name'),
           'datatype'       => 'itemlink',
           'massiveaction'  => false // implicit key==1
       ];

       $tab[] = [
           'id'             => 2,
           'table'          => $this->getTable(),
           'field'          => 'id',
           'name'           => __('ID'),
           'datatype'       => 'number',
           'massiveaction'  => false // implicit field is id
       ];

       $tab[] = [
           'id'             => 3,
           'table'          => $this->getTable(),
           'field'          => 'severity',
           'name'           => __('Severity', 'openvas'),
           'datatype'       => 'float',
           'massiveaction'  => false
       ];

       $tab[] = [
           'id'             => 10,
           'table'          => $this->getTable(),
           'field'          => 'threat',
           'name'           => __('Threat', 'openvas'),
           'datatype'       => 'string',
           'massiveaction'  => false
       ];

       $tab[] = [
           'id'             => 11,
           'table'          => 'glpi_plugin_openvas_vulnerabilitycategories',
           'field'          => 'completename',
           'name'           => __('Category'),
           'datatype'       => 'dropdown',
           'massiveaction'  => true
       ];

       $tab[] = [
           'id'             => 6,
           'table'          => $this->getTable(),
           'field'          => 'port',
           'name'           => __('Port'),
           'datatype'       => 'string'
       ];

       $tab[] = [
           'id'             => 16,
           'table'          => $this->getTable(),
           'field'          => 'comment',
           'name'           => __('Comments'),
           'datatype'       => 'text'
       ];

       $tab[] = [
           'id'             => 19,
           'table'          => $this->getTable(),
           'field'          => 'date_mod',
           'name'           => __('Last update'),
           'datatype'       => 'datetime',
           'massiveaction'  => false
       ];

       $tab[] = [
           'id'             => 121,
           'table'          => $this->getTable(),
           'field'          => 'date_creation',
           'name'           => __('Creation date'),
           'datatype'       => 'datetime',
           'massiveaction'  => false
       ];

       $tab[] = [
           'id'             => 12,
           'table'          => 'glpi_plugin_openvas_vulnerabilities_items',
           'field'          => 'name',
           'name'           => _x('quantity', 'Number of associated items'),
           'datatype'       => 'count',
           'massiveaction'  => false,
           'forcegroupby'   => true,
           'usehaving'      => true,
           'joinparams'     => [ 'jointype' => 'child' ]
       ];

       $tab[] = [
           'id'             => 13,
           'table'          => 'glpi_plugin_openvas_configs',
           'field'          => 'openvas_host',
           'name'           => __("Host", "openvas"),
           'massiveaction'  => false,
           'linkfield'      => 'id',
           'joinparams'     => ['beforejoin'
                                    => ['table'      => $this->getTable(),
                                        'linkfield'  => 'id']]
       ];

       $tab[] = [
           'id'             => 80,
           'table'          => 'glpi_entities',
           'field'          => 'completename',
           'name'           => __('Entity'),
           'datatype'       => 'dropdown',
           'massiveaction'  => false
       ];

      return $tab;
   }

   /**
   * @since version 1.0
   *
   * @param $field
   * @param $values
   * @param $options   array
   **/
   static function getSpecificValueToDisplay($field, $values, array $options=array()) {

      if (!is_array($values)) {
         $values = array($field => $values);
      }
      switch ($field) {
         case 'items_id':
            if (strpos($values[$field], "_") !== false) {
               $item_itemtype      = explode("_", $values[$field]);
               $values['itemtype'] = $item_itemtype[0];
               $values[$field]     = $item_itemtype[1];
            }

            if (isset($values['itemtype']) && $values[$field] > 0) {
               $item = new $values['itemtype']();
               $item->getFromDB($values[$field]);
               return $item->getLink( ['comments' => (isset($options['comments'])?$options['comments']:false)]);
            }
         break;

         case 'threat':
            return PluginOpenvasToolbox::displayThreat($values[$field]);
         break;
      }
      return parent::getSpecificValueToDisplay($field, $values, $options);
   }


   /**
   * @since version 0.84
   *
   * @param $field
   * @param $name            (default '')
   * @param $values          (default '')
   * @param $options   array
   *
   * @return string
   **/
   static function getSpecificValueToSelect($field, $name='', $values='', array $options=array()) {
      if (!is_array($values)) {
         $values = array($field => $values);
      }
      $options['display'] = false;
      switch ($field) {
         case 'items_id' :
            if (isset($values['itemtype']) && !empty($values['itemtype'])) {
               $options['name']  = $name;
               $options['value'] = $values[$field];
               return Dropdown::show($values['itemtype'], $options);
            } else {
               self::dropdownAllDevices($name, 0, 0);
               return ' ';
            }
         break;
         case 'threat':
            PluginOpenvasToolbox::dropdownThreats($name, $value[$field]);
            return '';
         break;
      }
      return parent::getSpecificValueToSelect($field, $name, $values, $options);
   }

   function defineTabs($options=array()) {

      $ong = array();
      $this->addDefaultFormTab($ong);
      $this->addStandardTab('PluginOpenvasVulnerability_Item', $ong, $options);
      $this->addStandardTab('Ticket', $ong, $options);
      $this->addStandardTab('KnowbaseItem_Item', $ong, $options);
      $this->addStandardTab('Log', $ong, $options);

      return $ong;
   }

   function showForm($id, $options=array()) {
      global $CFG_GLPI;

      $this->showFormHeader();

      echo "<tr class='tab_bg_1'>";
      echo "<td>" . __('Name') . "</td>";
      echo "<td>";
      echo $this->getName();
      echo "</td>";
      echo "<td>" . __('Port') . "</td>";
      echo "</td>";
      echo "<td>";
      echo $this->fields['port'];
      echo "</td>";
      echo "</tr>";

      echo "<tr class='tab_bg_1'>";
      echo "<td>".__('Category')."</td>";
      echo "<td>";
      Dropdown::show('PluginOpenvasVulnerabilityCategory',
      ['value' => $this->fields['plugin_openvas_vulnerabilitycategories_id']]);
      echo "</td>";
      echo "<td>" .
      __('Threat', 'openvas') . "</td>";
      echo "<td class='tab_bg_1'>";
      echo PluginOpenvasToolbox::displayThreat($this->fields['threat'],
      $this->fields['severity']);
      echo "</td>";
      echo "</tr>";

      echo "<tr class='tab_bg_1'>";
      echo "<td>" . __('Comments') . "</td><td colspan='3'>";
      echo "<textarea cols='80' rows='7' name='comment' >".
      $this->fields["comment"];
      echo "</textarea>";
      echo "</td>";
      echo "</tr>";

      $this->showFormButtons(['canupdate' => false, 'canedit' => true]);
      return true;
   }

   function prepareInputForUpdate($params = []) {
      unset($params['comment']);
      return $params;
   }


   /**
   *Synchronize vulneratiblities from OpenVAS
   */
   static function cronOpenvasSynchronizeVulnerabilities($task) {
      global $DB;

      $dbu = new DbUtils();
      if($config = PluginOpenvasConfig::getInstance()) {

         $restrict_date = "creation_time<" . $config->fields['search_max_days'] . "d";

         //If OpenVAS is not available, exit process
         if (!PluginOpenvasOmp::ping()) {
            $task->addVolume(0);
            return true;
         }

         //Total of export lines
         $index   = 0;
         $results = PluginOpenvasOmp::getResults($restrict_date);

         if (is_object($results) && get_class($results) == 'SimpleXMLElement') {
            $query = "TRUNCATE TABLE `glpi_plugin_openvas_vulnerabilities_items`";
            $DB->query($query);
         } else {
            $task->addVolume(0);
            return true;
         }

         $vulnerability = new self();
         $vuln_item     = new PluginOpenvasVulnerability_Item();
         $openvas_item  = new PluginOpenvasItem();

         foreach ($results as $result) {
            $uuid           = $result->attributes()->id;
            $vulnerabity_id = 0;

            //If result has no uuid, skip it!
            if (!$uuid) {
               continue;

            }
            //If there's an host, check if it exists in DB
            //If yes, associate the result to the host
            if (!isset($result->host)) {
               continue;
            }
            $host = $result->host->__toString();

            $tmp['name'] = $result->name->__toString();
            if (isset($result->description)) {
               $tmp['comment'] = $result->description->__toString();
            } else {
               $tmp['comment'] = '';
            }
            if (isset($result->port)) {
               $tmp['port'] = $result->port->__toString();
            } else {
               $tmp['port'] = '';
            }
            if (isset($result->entities_id)) {
               $tmp['entities_id'] = $result->entities_id;
            } else {
               $tmp['entities_id'] = '';
            }

            $params = ['entities_id' => $tmp['entities_id'],
                       'name'        => $tmp['name'],
                       'comment'     => $tmp['comment'],
                       'port'        => $tmp['port']
            ];
            $params = Toolbox::addslashes_deep($params);

            $query = ["`id`" => $params['id'],
                     "`name`" => $params['name'],
                     "`comment`" => $params['comment'],
                     "`port`" => $params['port']];

            //New vulnerability for an host
            if (!$dbu->countElementsInTable('glpi_plugin_openvas_vulnerabilities', $query)) {

               if (isset($result->severity)) {
                  $tmp['severity'] = floatval($result->severity);
               }

               if (isset($result->threat)) {
                  $tmp['threat'] = strval($result->threat);
               }

               $tmp = Toolbox::addslashes_deep($tmp);

               //Process rules engine
               $rule = new PluginOpenvasRuleVulnerabilityCollection();
               $data = $rule->processAllRules($tmp);

               //Alert should be ignored from import
               if (isset($data['_ignore_import'])) {
                  continue;
               }

               if (isset($data['category'])) {
                  $tmp['plugin_openvas_vulnerabilitycategories_id'] = $data['category'];
               }

               //Import vulnerability
               $vulnerability_id = $vulnerability->add($tmp);

               //Ticket creation request by a rule
               if (isset($data['_create_ticket']) && $data['_create_ticket']) {

                  //Create ticket if it hasn't been done before
                  $params     = ['tickettemplates_id' => $data['_create_ticket'],
                                 'requesttypes_id'    => $config->fields['requesttypes_id'],
                                 'category'           => $data['category'],
                                 'threat'             => $tmp['threat'],
                                 'vulnerability_id'   => $vulnerability_id,
                                 'severity'           => $tmp['severity'],
                                 'comment'            => $tmp['comment'],
                                 'port'               => $tmp['port'],
                                 'name'               => $tmp['name']
                  ];
                  $tickets_id = $vulnerability->createTicket($params);
               }

            } else {
               $iterator = $DB->request('glpi_plugin_openvas_vulnerabilities',
                                        ['AND'    => $params,
                                         'FIELDS' => ['id'],
                                         'LIMIT'  => 1
                                        ]);
               if ($vuln = $iterator->next()) {
                  $vulnerability_id = $vuln['id'];
               }
            }

            if (!$vulnerability_id) {
               continue;
            }

            $tmp = array();
            if (!$dbu->countElementsInTable('glpi_plugin_openvas_vulnerabilities_items',
                                      ["`plugin_openvas_vulnerabilities_id`" => $vulnerability_id,
                                       "`host`" => $host])) {

               $tmp['plugin_openvas_vulnerabilities_id'] = $vulnerability_id;
               $tmp['host']                              = $host;
               $tmp['name']                              = $uuid;
               if (isset($result->task)) {
                  $tmp['openvas_task_id'] = $result->task->attributes()->id->__toString();
               }

               //Try to get an itemtype associated with the host
               $item = PluginOpenvasItem::getItemByHost($host, true);
               if ($item) {
                  $tmp['itemtype'] = $item['itemtype'];
                  $tmp['items_id'] = $item['items_id'];
               }

               $dates = ['creation_time', 'modification_time'];
               foreach ($dates as $date_field) {
                  $tmp_date_creation = strval($result->$date_field->__toString());
                  if (!empty($tmp_date_creation)) {
                     $date             = new DateTime($tmp_date_creation);
                     $tmp[$date_field] = date_format($date, 'Y-m-d H:i:s');
                  }
               }

               $tmp = Toolbox::addslashes_deep($tmp);
               if ($vuln_item->add($tmp)) {
                  $index++;
               }
            }
         }

         //Update the last Vulnerability sync date
         PluginOpenvasConfig::updateVulnerabilitySyncDate();

         $task->addVolume($index);
         return true;
      } else{
         return false;
      }
   }

   /**
   * Create a ticket and link it to a vulnerability
   * @since 1.0
   *
   * @param an array of mandatory parameters to create the ticket
   * @return the ticket ID if successull, false otherwise
   */
   function createTicket($params = []) {
      global $DB;

      //Check if a ticket already exists for this vulnerability
      //if yes, do not create another one
      $query = "SELECT `glpi_tickets`.`id`
                FROM `glpi_tickets`
                WHERE `glpi_tickets`.`requesttypes_id`='".$params['requesttypes_id']."'
                  AND `id` IN (SELECT `tickets_id`
                               FROM `glpi_items_tickets`
                               WHERE `glpi_items_tickets`.`itemtype`='PluginOpenvasVulnerability'
                                  AND `glpi_items_tickets`.`items_id`='".$params['vulnerability_id']."')";
      $iterator = $DB->request($query);
      if (!$iterator->numrows()) {
         //Create a ticket using the template specified in the rule
         $ticket = new Ticket();

         //Ticket ticket's description will also contain severity, threat & port
         //it allows business rules to apply on these attributes
         $content = '';
         if (isset($params['category'])) {
            $content.= __("Category")."="
            .Dropdown::getDropdownName('glpi_plugin_openvas_vulnerabilitycategories',
                                       $params['category'])."\n";
         }
         $content.= __("Severity", 'openvas')."=".$params['severity'].", ";
         $content.= __("Threat", 'openvas')."=".$params['threat'].", ";
         $content.= __("Port")."=".$params['port']."\n\n";
         $content.= $params['comment'];
         $content = Toolbox::addslashes_deep($content);
         $fields  = ['_tickettemplates_id' => $params['tickettemplates_id'],
                      'name'               => $params['name'],
                      'content'            => $content,
                      'requesttypes_id'    => $params['requesttypes_id'],
                      'locations_id'       => 0,
                      'groups_id'          => 0,
                      'items_id' => [ 'PluginOpenvasVulnerability' => [ $params['vulnerability_id'] ] ]
                     ];
         return $ticket->add($fields);
      }
      return false;
   }

   static function cronInfo($name) {
      return [ 'description' => __("Synchronize OpenVAS vulnerabilities", "openvas") ];
   }

   //----------------- Install & uninstall -------------------//
   public static function install(Migration $migration) {
      global $DB;

      //This class is available since version 1.3.0
      if (!$DB->tableExists("glpi_plugin_openvas_vulnerabilities")) {
         $migration->displayMessage("Install glpi_plugin_openvas_vulnerabilities");

         $config = new self();

         //Install
         $query = "CREATE TABLE `glpi_plugin_openvas_vulnerabilities` (
            `id` int(11) NOT NULL auto_increment,
            `plugin_openvas_configs_id` INT(11) NOT NULL DEFAULT '1',
            `entities_id` INT(11) NOT NULL DEFAULT '0',
            `name` varchar(255) character set utf8 collate utf8_unicode_ci NOT NULL,
            `comment` text COLLATE utf8_unicode_ci,
            `severity` float(11) NOT NULL DEFAULT '0',
            `threat` varchar(255) character set utf8 collate utf8_unicode_ci NOT NULL,
            `locations_id` int(11) NOT NULL DEFAULT '0',
            `plugin_openvas_vulnerabilitycategories_id` int(11) NOT NULL DEFAULT '0',
            `groups_id` int(11) NOT NULL DEFAULT '0',
            `date_mod` datetime DEFAULT NULL,
            `date_creation` datetime DEFAULT NULL,
            `port` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
            PRIMARY KEY  (`id`),
            KEY `name` (`name`),
            KEY `severity` (`severity`),
            KEY `threat` (`threat`),
            KEY `plugin_openvas_vulnerabilitycategories_id` (`plugin_openvas_vulnerabilitycategories_id`),
            KEY `port` (`port`),
            KEY `date_mod` (`date_mod`),
            KEY `date_creation` (`date_creation`),
            KEY `plugin_openvas_configs_id` (`plugin_openvas_configs_id`)
         ) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;";
         $DB->query($query) or die ($DB->error());
      }

      if($DB->tableExists("glpi_plugin_openvas_vulnerabilities") &&
         !$DB->fieldExists("glpi_plugin_openvas_vulnerabilities", "plugin_openvas_configs_id")){
         $query = "ALTER TABLE `glpi_plugin_openvas_vulnerabilities` ADD `plugin_openvas_configs_id` INT NOT NULL DEFAULT '1';";
         $DB->query($query) or die ($DB->error());
         $query = "ALTER TABLE `glpi_plugin_openvas_vulnerabilities` ADD KEY `plugin_openvas_configs_id` (`plugin_openvas_configs_id`);";
         $DB->query($query) or die ($DB->error());
      }

      $cron = new CronTask;
      if (!$cron->getFromDBbyName(__CLASS__, 'openvasSynchronizeVulnerabilities')) {
         CronTask::Register(__CLASS__, 'openvasSynchronizeVulnerabilities', DAY_TIMESTAMP,
                            [ 'param' => 24, 'mode' => CronTask::MODE_EXTERNAL ]);
      }
   }

   public static function uninstall() {
      global $DB;
      $DB->query("DROP TABLE IF EXISTS `glpi_plugin_openvas_vulnerabilities`");
      $rule = new Rule();
      $rule->deleteByCriteria(['sub_type' => 'PluginOpenvasRuleVulnerability']);
   }
}
