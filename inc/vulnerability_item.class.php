<?php
/* @version $Id$
--------------------------------------------------------------------------
LICENSE

 This file is part of the openvas plugin.

OpenVAS plugin is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

openvas plugin is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GLPI; along with openvas. If not, see <http://www.gnu.org/licenses/>.
--------------------------------------------------------------------------
@package   openvas
@author    Teclib'
@copyright Copyright (c) 2016 Teclib'
@license   GPLv3
           http://www.gnu.org/licenses/gpl.txt
@link      https://github.com/pluginsGLPI/openvas
@link      http://www.glpi-project.org/
@link      http://www.teclib-edition.com/
@since     2016
----------------------------------------------------------------------*/

if (!defined('GLPI_ROOT')) {
   die("Sorry. You can't access this file directly");
}

/**
* Document_Item Class
*
*  Relation between Documents and Items
**/
class PluginOpenvasVulnerability_Item extends CommonDBRelation{

   static $rightname           = 'plugin_openvas_vulnerability';

   // From CommonDBRelation
   static public $itemtype_1    = 'PluginOpenvasVulnerability';
   static public $items_id_1    = 'plugin_openvas_vulnerabilities_id';
   //static public $take_entity_1 = true ;

   static public $itemtype_2    = 'itemtype';
   static public $items_id_2    = 'items_id';
   static public $logs_for_item_2 = false;

   public $dohistory = true;


   public function getTabNameForItem(CommonGLPI $item, $withtemplate=0) {
      $nb = 0;

      $dbu = new DbUtils();
      if (get_class($item) == 'PluginOpenvasVulnerability') {
         if ($_SESSION['glpishow_count_on_tabs']) {
            $nb = $dbu->countElementsInTable('glpi_plugin_openvas_vulnerabilities_items',
            ["`plugin_openvas_vulnerabilities_id`" => $item->getID()]);
         }
         return self::createTabEntry(_n('Item', 'Items', Session::getPluralNumber()), $nb);
      }
      return '';
   }

   public static function displayTabContentForItem(CommonGLPI $item, $tabnum=1, $withtemplate=0) {
      if (get_class($item) == 'PluginOpenvasVulnerability') {
         self::showForVulnerability($item);
      }
      return true;
   }

   /**
   * Display infos for a vulnerabilites
   * @since 1.0
   *
   * @return nothing
   */
   private static function showForVulnerability(CommonDBTM $item) {
      global $DB;

      $dbu = new DbUtils();

      if (isset($_GET["start"])) {
         $start = $_GET["start"];
      } else {
         $start = 0;
      }

      $iterator = $DB->request('glpi_plugin_openvas_vulnerabilities_items',
                               [ 'AND'   => [ 'plugin_openvas_vulnerabilities_id' => $item->getID()],
                                 'ORDER' => ['creation_time DESC'],
                                 'START' => intval($start),
                                 'LIMIT' => intval($_SESSION['glpilist_limit'])
                               ]);
      $number = $dbu->countElementsInTable('glpi_plugin_openvas_vulnerabilities_items',
      ["`plugin_openvas_vulnerabilities_id`" => $item->getID()]);

      Html::printAjaxPager(self::getTypeName(Session::getPluralNumber()), $start, $number);

      echo "<div class='spaced'><table class='tab_cadrehov'>";

      $base_url = PluginOpenvasConfig::getConsoleURL();

      echo "<tr><th>".__('Result ID', 'openvas')."</th>";
      echo "<th>".__('Host', 'openvas')."</th>";
      echo "<th>".__('Item')."</th>";
      echo "<th>".__('Creation date')."</th>";
      echo "<th>".__('Last update')."</th>";
      echo "</tr>";

      foreach ($iterator as $result) {
         echo "<tr class='tab_bg_1'>";
         $url = $base_url."?cmd=get_result&result_id=".$result['name'];
         echo "<td><a href='$url'>".$result['name']."</a></td>";
         $url = $base_url."?cmd=get_report&type=assets&host=".$result['host'];
         echo "<td><a href='$url'>".$result['name']."</a></td>";
         if ($result['itemtype'] != '' && $result['items_id']) {
            $item = new $result['itemtype'];
            $item->getFromDB($result['items_id']);
            echo "<td>".$item->getLink(['comments' => true])."</td>";
         } else {
            echo "<td></td>";
         }
         echo "<td>".Html::convDateTime($result['creation_time'])."</td>";
         echo "<td>".Html::convDateTime($result['modification_time'])."</td>";
         echo "</tr>";
      }

      echo "</th></tr>";
      echo "</table>";
      Html::printAjaxPager(self::getTypeName(Session::getPluralNumber()), $start, $number);

      echo "</div>";
   }

   /**
   * Show vulnerabilites details for an asset
   * @since 1.0
   *
   * @return nothing
   */
   static function showForItem(CommonDBTM $item) {
      global $DB;

      if (isset($_GET["start"])) {
         $start = $_GET["start"];
      } else {
         $start = 0;
      }

      $query = "SELECT v.*, vi.creation_time
                FROM `glpi_plugin_openvas_vulnerabilities_items` AS vi,
                     `glpi_plugin_openvas_vulnerabilities` AS v
                WHERE `v`.`id`=`vi`.`plugin_openvas_vulnerabilities_id`
                  AND `itemtype`='".$item->getType()."'
                  AND `items_id`='".$item->getID()."'";
      $iterator = $DB->request($query);
      $number  = $iterator->numrows();
      if (!$number) {
         return true;
      }

      $query.= " ORDER BY severity DESC
      LIMIT $start, ".intval($_SESSION['glpilist_limit']);
      $iterator = $DB->request($query);
      Html::printAjaxPager(self::getTypeName(Session::getPluralNumber()),
      $start, $number);

      echo "<div class='spaced'><table class='tab_cadrehov'>";
      echo "<tr>";
      echo "<th>".__('Threat', 'openvas')."</th>";
      echo "<th>".__('Vulnerability', 'openvas')."</th>";
      echo "<th>".__('Port')."</th>";
      echo "<th>".__('Date')."</th>";
      echo "</tr>";

      $url = PluginOpenvasVulnerability::getFormURL(true);
      foreach ($iterator as $vuln) {
         echo "<tr class='tab_bg_1'>";

         echo "<td>".PluginOpenvasToolbox::displayThreat($vuln['threat'],
         $vuln['severity'])."</td>";
         echo "<td><a href='$url?id=".$vuln['id']."'>".$vuln['name']."</a>";
         echo "&nbsp;";
         echo Html::showToolTip($vuln["comment"],
         ['link' => $url."?id=".$vuln['id'],
         'display' => false]);
         echo "</td>";
         echo "<td>".$vuln['port']."</td>";
         echo "<td>".Html::convDateTime($vuln["creation_time"])."</td>";
         echo "</tr>";
      }
      Html::printAjaxPager(self::getTypeName(Session::getPluralNumber()), $start, $number);
      echo "</table>";
      echo "</div>";
   }

   //----------------- Install & uninstall -------------------//
   public static function install(Migration $migration) {
      global $DB;

      //This class is available since version 1.3.0
      if (!$DB->tableExists("glpi_plugin_openvas_vulnerabilities_items")) {
         $migration->displayMessage("Install glpi_plugin_openvas_vulnerabilities_items");

         $config = new self();

         //Install
         $query = "CREATE TABLE `glpi_plugin_openvas_vulnerabilities_items` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
            `plugin_openvas_vulnerabilities_id` int(11) NOT NULL DEFAULT '0',
            `items_id` int(11) NOT NULL DEFAULT '0',
            `itemtype` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
            `host` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
            `task_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
            `creation_time` datetime DEFAULT NULL,
            `modification_time` datetime DEFAULT NULL,
            `date_creation` datetime DEFAULT NULL,
            `date_mod` datetime DEFAULT NULL,
            PRIMARY KEY (`id`),
            KEY `task_id` (`task_id`),
            KEY `plugin_openvas_vulnerabilities_id` (`plugin_openvas_vulnerabilities_id`),
            KEY `name` (`name`),
            KEY `host` (`host`),
            KEY `creation_time` (`creation_time`),
            KEY `modification_time` (`modification_time`),
            KEY `itemtype` (`itemtype`),
            KEY `items_id` (`items_id`)
         ) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;";
         $DB->query($query) or die ($DB->error());
      }
   }

   public static function uninstall() {
      global $DB;
      $DB->query("DROP TABLE IF EXISTS `glpi_plugin_openvas_vulnerabilities_items`");
   }

}
